name: deploy

on:
    push:
        branches:
            - main
            - master

jobs:
    deploy:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Build and Push Docker Image
              run: |
                docker build -t devops-task-two .
                docker tag devops-task-two ${{ secrets.DOCKER_USERNAME }}/devops-task-two:latest
                echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
                docker push ${{ secrets.DOCKER_USERNAME }}/devops-task-two:latest

            - name: Setup SSH Key
              run: |
                mkdir -p ~/.ssh
                echo "${{ secrets.SSH_PEM }}" > ~/.ssh/hng-devops-task0.pem
                chmod 600 ~/.ssh/hng-devops-task0.pem

            - name: Add EC2 host key to known_hosts
              run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

            - name: Deploy Application
              run: |
                ssh -i ~/.ssh/hng-devops-task0.pem ${{ vars.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'

                # Step 1: Remove the old container if it exists
                if docker ps -a --format '{{.Names}}' | grep -qw devops-task-two-old; then
                    docker rm --force devops-task-two-old
                fi

                # Step 2: Stop and rename the current running container
                if docker ps --format '{{.Names}}' | grep -qw devops-task-two; then
                    docker stop devops-task-two
                    docker rename devops-task-two devops-task-two-old
                fi

                # Step 3: Pull the latest image
                docker pull ${{ secrets.DOCKER_USERNAME }}/devops-task-two:latest

                # Step 4: Run the new container
                docker run -d --name devops-task-two -p 8000:8000 ${{ secrets.DOCKER_USERNAME }}/devops-task-two:latest

                EOF
